Alternate Parity

1.) Define the entries of your table in words. E.g. T(i) or T(i, j) is ...

- Let T(i) = be the maximum length of the longest increasing subsequence from a[1...i], ending at a_i where each number has an alternate parity.

2.) State a recurrence for the entries of your table in terms of smaller subproblems.  Don't forget your base case(s).

- B.C.: T(0) = 0
- Recurrence: T(i) = max{1 + T(j)}: if a_i > a_j and parity(a_i) != parity(a_j) | 1 <= i <= n, 1 <= j <= i-1

3.) Write pseudocode for your algorithm to solve this problem.

T(0) = 0
for i = 1 -> n do:
	T(i) = 1
	for j = 1 -> i-1:
		if (a_i > a_j and parity(a_i) != parity(a_j)):
			T(i) = max{T(j)} + 1
return max{T(.)}

4.) State and analyze the running time of your algorithm

Running two for loops to find the length of the longest increasing subsequence takes O(n^2) time. Returning the max length in T(i) takes O(n) time. Overall runtime is O(n^2)